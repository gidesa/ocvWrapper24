#ifdef __cplusplus
extern "C" {
#endif
// User functions
	bool     pCvRedirectException(void * func);
        void     pCvPCACompute2(Mat_t* data, Mat_t* mean, Mat_t* eigenvectors, Mat_t* eigenvalues, int maxComponents);
        void     pCvDrawMatches(Mat_t* img1, vector_KeyPoint* keypoints1, Mat_t* img2, vector_KeyPoint* keypoints2,
	                        vector_DMatch* matches1to2, Mat_t* outImg, Scalar_t* matchColor, Scalar_t* singlePointColor);
// Opencv Mat class
	Mat_t*   pCvMatCreate(int ndims, const int* dims, int mtype);
	Mat_t*   pCvMatCreateEmpty();
	Mat_t*   pCvMatImageCreate(int width, int height, int mtype);
	Mat_t*   pCvMat2dCreate(int cols, int rows, int mtype);
	Mat_t*   pCvMatROI(Mat_t* src, CvRectS* roi);
	void     pCvMatDelete(struct Mat_t* wrapper);
	void     pCvMatFill(struct Mat_t* wrapper, struct Scalar_t* val);
	void     pCvMatCopy(struct Mat_t* src, struct Mat_t* dst);
	int      pCvMatGetWidth(struct Mat_t* wrapper);
	int      pCvMatGetHeight(struct Mat_t* wrapper);
	int      pCvMatGetChannels(struct Mat_t* wrapper);
	int      pCvMatGetType(struct Mat_t* wrapper);
	int      pCvMatGetDims(struct Mat_t* wrapper);
	int      pCvMatGetData(struct Mat_t* wrapper);
	int      pCvMatGetDepth(struct Mat_t* wrapper);
	uchar    pCvMatGetByte(struct Mat_t* wrapper, int rowind, int colind);
	uchar    pCvMatSetByte(struct Mat_t* wrapper, int rowind, int colind, unsigned char value);
	float    pCvMatGetFloat(struct Mat_t* wrapper, int rowind, int colind);
	float    pCvMatSetFloat(struct Mat_t* wrapper, int rowind, int colind, float value);
	float    pCvMatGetFloatMultidim(struct Mat_t* wrapper, int* indexes);
	float    pCvMatSetFloatMultidim(struct Mat_t* wrapper, int* indexes, float value);
        double   pCvMatGetDouble(struct Mat_t* wrapper, int rowind, int colind);
        double   pCvMatSetDouble(struct Mat_t* wrapper, int rowind, int colind, double value);
	int      pCvMatGetInt(struct Mat_t* wrapper, int rowind, int colind);
	int      pCvMatSetInt(struct Mat_t* wrapper, int rowind, int colind, int value);
	Vec3b_t* pCvMatGetPixelC3(struct Mat_t* wrapper, int rowind, int colind);
	Vec3b_t* pCvMatSetPixelC3(struct Mat_t* wrapper, int rowind, int colind, Vec3b_t* value);
	Mat_t*   pCvMatGetRow(struct Mat_t* wrapper, int nrow);
// C++ string class
	string_t* pCvstringCreate(const int nrchar);
	void     pCvstringDelete(string_t* wrapper);

// Other OpenCV native classes and pointers, C++ vectors
	Size_t*   pCvSizeCreate();
	void     pCvSizeDelete(Size_t* wrapper);
	void     pCvSizeToStruct(Size_t* wrapper, CvSizeS* dest);
	void     pCvSizeFromStruct(Size_t* wrapper, CvSizeS* dest);
	Rect_t*   pCvRectCreate();
	void     pCvRectDelete(Rect_t* wrapper);
	void     pCvRectToStruct(Rect_t* wrapper, CvRectS* dest);
	void     pCvRectFromStruct(Rect_t* wrapper, CvRectS* dest);
	Range_t*   pCvRangeCreate();
	void     pCvRangeDelete(Range_t* wrapper);
	void     pCvRangeToStruct(Range_t* wrapper, CvRangeS* dest);
	void     pCvRangeFromStruct(Range_t* wrapper, CvRangeS* dest);
	CvSlice_t*   pCvCvSliceCreate();
	void     pCvCvSliceDelete(CvSlice_t* wrapper);
	void     pCvCvSliceToStruct(CvSlice_t* wrapper, CvSliceS* dest);
	void     pCvCvSliceFromStruct(CvSlice_t* wrapper, CvSliceS* dest);
	Point_t*   pCvPointCreate();
	void     pCvPointDelete(Point_t* wrapper);
	void     pCvPointToStruct(Point_t* wrapper, CvPointS* dest);
	void     pCvPointFromStruct(Point_t* wrapper, CvPointS* dest);
	Point2f_t*   pCvPoint2fCreate();
	void     pCvPoint2fDelete(Point2f_t* wrapper);
	void     pCvPoint2fToStruct(Point2f_t* wrapper, CvPoint2fS* dest);
	void     pCvPoint2fFromStruct(Point2f_t* wrapper, CvPoint2fS* dest);
	Point2d_t*   pCvPoint2dCreate();
	void     pCvPoint2dDelete(Point2d_t* wrapper);
	void     pCvPoint2dToStruct(Point2d_t* wrapper, CvPoint2dS* dest);
	void     pCvPoint2dFromStruct(Point2d_t* wrapper, CvPoint2dS* dest);
	Vec2d_t*   pCvVec2dCreate();
	void     pCvVec2dDelete(Vec2d_t* wrapper);
	void     pCvVec2dToStruct(Vec2d_t* wrapper, CvVec2dS* dest);
	void     pCvVec2dFromStruct(Vec2d_t* wrapper, CvVec2dS* dest);
	Vec3d_t*   pCvVec3dCreate();
	void     pCvVec3dDelete(Vec3d_t* wrapper);
	void     pCvVec3dToStruct(Vec3d_t* wrapper, CvVec3dS* dest);
	void     pCvVec3dFromStruct(Vec3d_t* wrapper, CvVec3dS* dest);
	Vec3b_t*   pCvVec3bCreate();
	void     pCvVec3bDelete(Vec3b_t* wrapper);
	void     pCvVec3bToStruct(Vec3b_t* wrapper, CvVec3bS* dest);
	void     pCvVec3bFromStruct(Vec3b_t* wrapper, CvVec3bS* dest);
	Vec4f_t*   pCvVec4fCreate();
	void     pCvVec4fDelete(Vec4f_t* wrapper);
	void     pCvVec4fToStruct(Vec4f_t* wrapper, CvVec4fS* dest);
	void     pCvVec4fFromStruct(Vec4f_t* wrapper, CvVec4fS* dest);
	Vec6f_t*   pCvVec6fCreate();
	void     pCvVec6fDelete(Vec6f_t* wrapper);
	void     pCvVec6fToStruct(Vec6f_t* wrapper, CvVec6fS* dest);
	void     pCvVec6fFromStruct(Vec6f_t* wrapper, CvVec6fS* dest);
	Scalar_t*   pCvScalarCreate();
	void     pCvScalarDelete(Scalar_t* wrapper);
	void     pCvScalarToStruct(Scalar_t* wrapper, CvScalarS* dest);
	void     pCvScalarFromStruct(Scalar_t* wrapper, CvScalarS* dest);
	RotatedRect_t*   pCvRotatedRectCreate();
	void     pCvRotatedRectDelete(RotatedRect_t* wrapper);
	void     pCvRotatedRectToStruct(RotatedRect_t* wrapper, CvRotatedRectS* dest);
	void     pCvRotatedRectFromStruct(RotatedRect_t* wrapper, CvRotatedRectS* dest);
	CvDTreeNode_t*   pCvCvDTreeNodeCreate();
	void     pCvCvDTreeNodeDelete(CvDTreeNode_t* wrapper);
	void     pCvCvDTreeNodeToStruct(CvDTreeNode_t* wrapper, CvDTreeNodeS* dest);
	void     pCvCvDTreeNodeFromStruct(CvDTreeNode_t* wrapper, CvDTreeNodeS* dest);
	TermCriteria_t*   pCvTermCriteriaCreate();
	void     pCvTermCriteriaDelete(TermCriteria_t* wrapper);
	void     pCvTermCriteriaToStruct(TermCriteria_t* wrapper, CvTermCriteriaS* dest);
	void     pCvTermCriteriaFromStruct(TermCriteria_t* wrapper, CvTermCriteriaS* dest);
	CvTermCriteria_t*   pCvCvTermCriteriaCreate();
	void     pCvCvTermCriteriaDelete(CvTermCriteria_t* wrapper);
	void     pCvCvTermCriteriaToStruct(CvTermCriteria_t* wrapper, CvTermCriteriaS* dest);
	void     pCvCvTermCriteriaFromStruct(CvTermCriteria_t* wrapper, CvTermCriteriaS* dest);
	Moments_t*   pCvMomentsCreate();
	void     pCvMomentsDelete(Moments_t* wrapper);
	void     pCvMomentsToStruct(Moments_t* wrapper, CvMomentsS* dest);
	void     pCvMomentsFromStruct(Moments_t* wrapper, CvMomentsS* dest);
	IndexParams_t*   pCvIndexParamsCreate();
	void     pCvIndexParamsDelete(IndexParams_t* wrapper);
	SearchParams_t*   pCvSearchParamsCreate();
	void     pCvSearchParamsDelete(SearchParams_t* wrapper);
	CvSVMParams_t*   pCvCvSVMParamsCreate();
	void     pCvCvSVMParamsDelete(CvSVMParams_t* wrapper);
	CvParamGrid_t*   pCvCvParamGridCreate();
	void     pCvCvParamGridDelete(CvParamGrid_t* wrapper);
	CvGBTreesParams_t*   pCvCvGBTreesParamsCreate();
	void     pCvCvGBTreesParamsDelete(CvGBTreesParams_t* wrapper);
	BackgroundSubtractor_t*   pCvBackgroundSubtractorCreate();
	void     pCvBackgroundSubtractorDelete(BackgroundSubtractor_t* wrapper);
	CvStatModel_t*   pCvCvStatModelCreate();
	void     pCvCvStatModelDelete(CvStatModel_t* wrapper);
	vector_Mat*   pCvVectorMatCreate(int n);
	void   pCvVectorMatDelete(vector_Mat* wrapper);
	int   pCvVectorMatLength(vector_Mat* wrapper);
	Mat_t*   pCvVectorMatGet(vector_Mat* wrapper, int index);
	Mat_t*   pCvVectorMatSet(vector_Mat* wrapper, int index, Mat_t* value);
	vector_string*   pCvVectorstringCreate(int n);
	void   pCvVectorstringDelete(vector_string* wrapper);
	int   pCvVectorstringLength(vector_string* wrapper);
	string_t*   pCvVectorstringGet(vector_string* wrapper, int index);
	string_t*   pCvVectorstringSet(vector_string* wrapper, int index, string_t* value);
	vector_KeyPoint*   pCvVectorKeyPointCreate(int n);
	void   pCvVectorKeyPointDelete(vector_KeyPoint* wrapper);
	int   pCvVectorKeyPointLength(vector_KeyPoint* wrapper);
	KeyPoint_t*   pCvVectorKeyPointGet(vector_KeyPoint* wrapper, int index);
	KeyPoint_t*   pCvVectorKeyPointSet(vector_KeyPoint* wrapper, int index, KeyPoint_t* value);
	vector_float*   pCvVectorfloatCreate(int n);
	void   pCvVectorfloatDelete(vector_float* wrapper);
	int   pCvVectorfloatLength(vector_float* wrapper);
	float   pCvVectorfloatGet(vector_float* wrapper, int index);
	float   pCvVectorfloatSet(vector_float* wrapper, int index, float value);
	vector_int*   pCvVectorintCreate(int n);
	void   pCvVectorintDelete(vector_int* wrapper);
	int   pCvVectorintLength(vector_int* wrapper);
	int   pCvVectorintGet(vector_int* wrapper, int index);
	int   pCvVectorintSet(vector_int* wrapper, int index, int value);
	vector_uchar*   pCvVectorucharCreate(int n);
	void   pCvVectorucharDelete(vector_uchar* wrapper);
	int   pCvVectorucharLength(vector_uchar* wrapper);
	uchar   pCvVectorucharGet(vector_uchar* wrapper, int index);
	uchar   pCvVectorucharSet(vector_uchar* wrapper, int index, uchar value);
	vector_Rect*   pCvVectorRectCreate(int n);
	void   pCvVectorRectDelete(vector_Rect* wrapper);
	int   pCvVectorRectLength(vector_Rect* wrapper);
	Rect_t*   pCvVectorRectGet(vector_Rect* wrapper, int index);
	Rect_t*   pCvVectorRectSet(vector_Rect* wrapper, int index, Rect_t* value);
	vector_double*   pCvVectordoubleCreate(int n);
	void   pCvVectordoubleDelete(vector_double* wrapper);
	int   pCvVectordoubleLength(vector_double* wrapper);
	double   pCvVectordoubleGet(vector_double* wrapper, int index);
	double   pCvVectordoubleSet(vector_double* wrapper, int index, double value);
	vector_DMatch*   pCvVectorDMatchCreate(int n);
	void   pCvVectorDMatchDelete(vector_DMatch* wrapper);
	int   pCvVectorDMatchLength(vector_DMatch* wrapper);
	DMatch_t*   pCvVectorDMatchGet(vector_DMatch* wrapper, int index);
	DMatch_t*   pCvVectorDMatchSet(vector_DMatch* wrapper, int index, DMatch_t* value);
	vector_Point*   pCvVectorPointCreate(int n);
	void   pCvVectorPointDelete(vector_Point* wrapper);
	int   pCvVectorPointLength(vector_Point* wrapper);
	Point_t*   pCvVectorPointGet(vector_Point* wrapper, int index);
	Point_t*   pCvVectorPointSet(vector_Point* wrapper, int index, Point_t* value);
	vector_Point2f*   pCvVectorPoint2fCreate(int n);
	void   pCvVectorPoint2fDelete(vector_Point2f* wrapper);
	int   pCvVectorPoint2fLength(vector_Point2f* wrapper);
	Point2f_t*   pCvVectorPoint2fGet(vector_Point2f* wrapper, int index);
	Point2f_t*   pCvVectorPoint2fSet(vector_Point2f* wrapper, int index, Point2f_t* value);
	vector_Vec4f*   pCvVectorVec4fCreate(int n);
	void   pCvVectorVec4fDelete(vector_Vec4f* wrapper);
	int   pCvVectorVec4fLength(vector_Vec4f* wrapper);
	Vec4f_t*   pCvVectorVec4fGet(vector_Vec4f* wrapper, int index);
	Vec4f_t*   pCvVectorVec4fSet(vector_Vec4f* wrapper, int index, Vec4f_t* value);
	vector_Vec6f*   pCvVectorVec6fCreate(int n);
	void   pCvVectorVec6fDelete(vector_Vec6f* wrapper);
	int   pCvVectorVec6fLength(vector_Vec6f* wrapper);
	Vec6f_t*   pCvVectorVec6fGet(vector_Vec6f* wrapper, int index);
	Vec6f_t*   pCvVectorVec6fSet(vector_Vec6f* wrapper, int index, Vec6f_t* value);
	vector_vector_Point*   pCvVectorvector_PointCreate(int n);
	void   pCvVectorvector_PointDelete(vector_vector_Point* wrapper);
	int   pCvVectorvector_PointLength(vector_vector_Point* wrapper);
	vector_Point*   pCvVectorvector_PointGet(vector_vector_Point* wrapper, int index);
	vector_Point*   pCvVectorvector_PointSet(vector_vector_Point* wrapper, int index, vector_Point* value);
	vector_vector_DMatch*   pCvVectorvector_DMatchCreate(int n);
	void   pCvVectorvector_DMatchDelete(vector_vector_DMatch* wrapper);
	int   pCvVectorvector_DMatchLength(vector_vector_DMatch* wrapper);
	vector_DMatch*   pCvVectorvector_DMatchGet(vector_vector_DMatch* wrapper, int index);
	vector_DMatch*   pCvVectorvector_DMatchSet(vector_vector_DMatch* wrapper, int index, vector_DMatch* value);
	vector_vector_Point2f*   pCvVectorvector_Point2fCreate(int n);
	void   pCvVectorvector_Point2fDelete(vector_vector_Point2f* wrapper);
	int   pCvVectorvector_Point2fLength(vector_vector_Point2f* wrapper);
	vector_Point2f*   pCvVectorvector_Point2fGet(vector_vector_Point2f* wrapper, int index);
	vector_Point2f*   pCvVectorvector_Point2fSet(vector_vector_Point2f* wrapper, int index, vector_Point2f* value);
	Algorithm_t*   pCvPtr_AlgorithmConvert(Ptr_Algorithm* wrapper);
	void    pCvPtr_AlgorithmDelete(Ptr_Algorithm* ptr, Algorithm_t* wrapper = 0);
	Feature2D_t*   pCvPtr_Feature2DConvert(Ptr_Feature2D* wrapper);
	void    pCvPtr_Feature2DDelete(Ptr_Feature2D* ptr, Feature2D_t* wrapper = 0);
	FaceRecognizer_t*   pCvPtr_FaceRecognizerConvert(Ptr_FaceRecognizer* wrapper);
	void    pCvPtr_FaceRecognizerDelete(Ptr_FaceRecognizer* ptr, FaceRecognizer_t* wrapper = 0);
	CLAHE_t*   pCvPtr_CLAHEConvert(Ptr_CLAHE* wrapper);
	void    pCvPtr_CLAHEDelete(Ptr_CLAHE* ptr, CLAHE_t* wrapper = 0);
	FeatureDetector_t*   pCvPtr_FeatureDetectorConvert(Ptr_FeatureDetector* wrapper);
	void    pCvPtr_FeatureDetectorDelete(Ptr_FeatureDetector* ptr, FeatureDetector_t* wrapper = 0);
	DescriptorExtractor_t*   pCvPtr_DescriptorExtractorConvert(Ptr_DescriptorExtractor* wrapper);
	void    pCvPtr_DescriptorExtractorDelete(Ptr_DescriptorExtractor* ptr, DescriptorExtractor_t* wrapper = 0);
	DescriptorMatcher_t*   pCvPtr_DescriptorMatcherConvert(Ptr_DescriptorMatcher* wrapper);
	void    pCvPtr_DescriptorMatcherDelete(Ptr_DescriptorMatcher* ptr, DescriptorMatcher_t* wrapper = 0);
	IndexParams_t*   pCvPtr_flann_IndexParamsConvert(Ptr_flann_IndexParams* wrapper);
	void    pCvPtr_flann_IndexParamsDelete(Ptr_flann_IndexParams* ptr, IndexParams_t* wrapper = 0);
	SearchParams_t*   pCvPtr_flann_SearchParamsConvert(Ptr_flann_SearchParams* wrapper);
	void    pCvPtr_flann_SearchParamsDelete(Ptr_flann_SearchParams* ptr, SearchParams_t* wrapper = 0);

#ifdef __cplusplus
}
#endif
